//
// Autogenerated by Thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('../thrift').Thrift;
var ttypes = module.exports = {};
ttypes.AdjacencyType = { 
'CONJUNCTIVE' : 0
,'DISJUNCTIVE' : 1
}
ttypes.NodeType = { 
'OPERATOR' : 0
,'STAGE' : 1
}
ttypes.OperatorType = { 
'JOIN' : 0
,'MAPJOIN' : 1
,'EXTRACT' : 2
,'FILTER' : 3
,'FORWARD' : 4
,'GROUPBY' : 5
,'LIMIT' : 6
,'SCRIPT' : 7
,'SELECT' : 8
,'TABLESCAN' : 9
,'FILESINK' : 10
,'REDUCESINK' : 11
,'UNION' : 12
,'UDTF' : 13
,'LATERALVIEWJOIN' : 14
,'LATERALVIEWFORWARD' : 15
,'HASHTABLESINK' : 16
,'HASHTABLEDUMMY' : 17
}
ttypes.TaskType = { 
'MAP' : 0
,'REDUCE' : 1
,'OTHER' : 2
}
ttypes.StageType = { 
'CONDITIONAL' : 0
,'COPY' : 1
,'DDL' : 2
,'MAPRED' : 3
,'EXPLAIN' : 4
,'FETCH' : 5
,'FUNC' : 6
,'MAPREDLOCAL' : 7
,'MOVE' : 8
,'STATS' : 9
}
var Adjacency = module.exports.Adjacency = function(args){
  this.node = null
  this.children = null
  this.adjacencyType = null
if( args != null ){  if (null != args.node)
  this.node = args.node
  if (null != args.children)
  this.children = args.children
  if (null != args.adjacencyType)
  this.adjacencyType = args.adjacencyType
}}
Adjacency.prototype = {}
Adjacency.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.node = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.LIST) {
        {
          var _size0 = 0
          var rtmp3
          this.children = []
          var _etype3 = 0
          rtmp3 = input.readListBegin()
          _etype3 = rtmp3.etype
          _size0 = rtmp3.size
          for (var _i4 = 0; _i4 < _size0; ++_i4)
          {
            var elem5 = null
            elem5 = input.readString()
            this.children.push(elem5)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I32) {
        this.adjacencyType = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Adjacency.prototype.write = function(output){ 
  output.writeStructBegin('Adjacency')
  if (null != this.node) {
    output.writeFieldBegin('node', Thrift.Type.STRING, 1)
    output.writeString(this.node)
    output.writeFieldEnd()
  }
  if (null != this.children) {
    output.writeFieldBegin('children', Thrift.Type.LIST, 2)
    {
      output.writeListBegin(Thrift.Type.STRING, this.children.length)
      {
        for(var iter6 in this.children)
        {
          if (this.children.hasOwnProperty(iter6))
          {
            iter6=this.children[iter6]
            output.writeString(iter6)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.adjacencyType) {
    output.writeFieldBegin('adjacencyType', Thrift.Type.I32, 3)
    output.writeI32(this.adjacencyType)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Graph = module.exports.Graph = function(args){
  this.nodeType = null
  this.roots = null
  this.adjacencyList = null
if( args != null ){  if (null != args.nodeType)
  this.nodeType = args.nodeType
  if (null != args.roots)
  this.roots = args.roots
  if (null != args.adjacencyList)
  this.adjacencyList = args.adjacencyList
}}
Graph.prototype = {}
Graph.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I32) {
        this.nodeType = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.LIST) {
        {
          var _size7 = 0
          var rtmp3
          this.roots = []
          var _etype10 = 0
          rtmp3 = input.readListBegin()
          _etype10 = rtmp3.etype
          _size7 = rtmp3.size
          for (var _i11 = 0; _i11 < _size7; ++_i11)
          {
            var elem12 = null
            elem12 = input.readString()
            this.roots.push(elem12)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.LIST) {
        {
          var _size13 = 0
          var rtmp3
          this.adjacencyList = []
          var _etype16 = 0
          rtmp3 = input.readListBegin()
          _etype16 = rtmp3.etype
          _size13 = rtmp3.size
          for (var _i17 = 0; _i17 < _size13; ++_i17)
          {
            var elem18 = null
            elem18 = new ttypes.Adjacency()
            elem18.read(input)
            this.adjacencyList.push(elem18)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Graph.prototype.write = function(output){ 
  output.writeStructBegin('Graph')
  if (null != this.nodeType) {
    output.writeFieldBegin('nodeType', Thrift.Type.I32, 1)
    output.writeI32(this.nodeType)
    output.writeFieldEnd()
  }
  if (null != this.roots) {
    output.writeFieldBegin('roots', Thrift.Type.LIST, 2)
    {
      output.writeListBegin(Thrift.Type.STRING, this.roots.length)
      {
        for(var iter19 in this.roots)
        {
          if (this.roots.hasOwnProperty(iter19))
          {
            iter19=this.roots[iter19]
            output.writeString(iter19)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.adjacencyList) {
    output.writeFieldBegin('adjacencyList', Thrift.Type.LIST, 3)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.adjacencyList.length)
      {
        for(var iter20 in this.adjacencyList)
        {
          if (this.adjacencyList.hasOwnProperty(iter20))
          {
            iter20=this.adjacencyList[iter20]
            iter20.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Operator = module.exports.Operator = function(args){
  this.operatorId = null
  this.operatorType = null
  this.operatorAttributes = null
  this.operatorCounters = null
  this.done = null
  this.started = null
if( args != null ){  if (null != args.operatorId)
  this.operatorId = args.operatorId
  if (null != args.operatorType)
  this.operatorType = args.operatorType
  if (null != args.operatorAttributes)
  this.operatorAttributes = args.operatorAttributes
  if (null != args.operatorCounters)
  this.operatorCounters = args.operatorCounters
  if (null != args.done)
  this.done = args.done
  if (null != args.started)
  this.started = args.started
}}
Operator.prototype = {}
Operator.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.operatorId = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I32) {
        this.operatorType = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.MAP) {
        {
          var _size21 = 0
          var rtmp3
          this.operatorAttributes = {}
          var _ktype22 = 0
          var _vtype23 = 0
          rtmp3 = input.readMapBegin()
          _ktype22= rtmp3.ktype
          _vtype23= rtmp3.vtype
          _size21= rtmp3.size
          for (var _i25 = 0; _i25 < _size21; ++_i25)
          {
            key26 = null
            val27 = null
            key26 = input.readString()
            val27 = input.readString()
            this.operatorAttributes[key26] = val27
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.MAP) {
        {
          var _size28 = 0
          var rtmp3
          this.operatorCounters = {}
          var _ktype29 = 0
          var _vtype30 = 0
          rtmp3 = input.readMapBegin()
          _ktype29= rtmp3.ktype
          _vtype30= rtmp3.vtype
          _size28= rtmp3.size
          for (var _i32 = 0; _i32 < _size28; ++_i32)
          {
            key33 = null
            val34 = null
            key33 = input.readString()
            val34 = input.readI64()
            this.operatorCounters[key33] = val34
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.BOOL) {
        this.done = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.BOOL) {
        this.started = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Operator.prototype.write = function(output){ 
  output.writeStructBegin('Operator')
  if (null != this.operatorId) {
    output.writeFieldBegin('operatorId', Thrift.Type.STRING, 1)
    output.writeString(this.operatorId)
    output.writeFieldEnd()
  }
  if (null != this.operatorType) {
    output.writeFieldBegin('operatorType', Thrift.Type.I32, 2)
    output.writeI32(this.operatorType)
    output.writeFieldEnd()
  }
  if (null != this.operatorAttributes) {
    output.writeFieldBegin('operatorAttributes', Thrift.Type.MAP, 3)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.operatorAttributes))
      {
        for(var kiter35 in this.operatorAttributes)        {
          if (this.operatorAttributes.hasOwnProperty(kiter35))
          {
            var viter36 = this.operatorAttributes[kiter35]
            output.writeString(kiter35)
            output.writeString(viter36)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.operatorCounters) {
    output.writeFieldBegin('operatorCounters', Thrift.Type.MAP, 4)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.operatorCounters))
      {
        for(var kiter37 in this.operatorCounters)        {
          if (this.operatorCounters.hasOwnProperty(kiter37))
          {
            var viter38 = this.operatorCounters[kiter37]
            output.writeString(kiter37)
            output.writeI64(viter38)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.done) {
    output.writeFieldBegin('done', Thrift.Type.BOOL, 5)
    output.writeBool(this.done)
    output.writeFieldEnd()
  }
  if (null != this.started) {
    output.writeFieldBegin('started', Thrift.Type.BOOL, 6)
    output.writeBool(this.started)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Task = module.exports.Task = function(args){
  this.taskId = null
  this.taskType = null
  this.taskAttributes = null
  this.taskCounters = null
  this.operatorGraph = null
  this.operatorList = null
  this.done = null
  this.started = null
if( args != null ){  if (null != args.taskId)
  this.taskId = args.taskId
  if (null != args.taskType)
  this.taskType = args.taskType
  if (null != args.taskAttributes)
  this.taskAttributes = args.taskAttributes
  if (null != args.taskCounters)
  this.taskCounters = args.taskCounters
  if (null != args.operatorGraph)
  this.operatorGraph = args.operatorGraph
  if (null != args.operatorList)
  this.operatorList = args.operatorList
  if (null != args.done)
  this.done = args.done
  if (null != args.started)
  this.started = args.started
}}
Task.prototype = {}
Task.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.taskId = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I32) {
        this.taskType = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.MAP) {
        {
          var _size39 = 0
          var rtmp3
          this.taskAttributes = {}
          var _ktype40 = 0
          var _vtype41 = 0
          rtmp3 = input.readMapBegin()
          _ktype40= rtmp3.ktype
          _vtype41= rtmp3.vtype
          _size39= rtmp3.size
          for (var _i43 = 0; _i43 < _size39; ++_i43)
          {
            key44 = null
            val45 = null
            key44 = input.readString()
            val45 = input.readString()
            this.taskAttributes[key44] = val45
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.MAP) {
        {
          var _size46 = 0
          var rtmp3
          this.taskCounters = {}
          var _ktype47 = 0
          var _vtype48 = 0
          rtmp3 = input.readMapBegin()
          _ktype47= rtmp3.ktype
          _vtype48= rtmp3.vtype
          _size46= rtmp3.size
          for (var _i50 = 0; _i50 < _size46; ++_i50)
          {
            key51 = null
            val52 = null
            key51 = input.readString()
            val52 = input.readI64()
            this.taskCounters[key51] = val52
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.STRUCT) {
        this.operatorGraph = new ttypes.Graph()
        this.operatorGraph.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.LIST) {
        {
          var _size53 = 0
          var rtmp3
          this.operatorList = []
          var _etype56 = 0
          rtmp3 = input.readListBegin()
          _etype56 = rtmp3.etype
          _size53 = rtmp3.size
          for (var _i57 = 0; _i57 < _size53; ++_i57)
          {
            var elem58 = null
            elem58 = new ttypes.Operator()
            elem58.read(input)
            this.operatorList.push(elem58)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 7:      if (ftype == Thrift.Type.BOOL) {
        this.done = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 8:      if (ftype == Thrift.Type.BOOL) {
        this.started = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Task.prototype.write = function(output){ 
  output.writeStructBegin('Task')
  if (null != this.taskId) {
    output.writeFieldBegin('taskId', Thrift.Type.STRING, 1)
    output.writeString(this.taskId)
    output.writeFieldEnd()
  }
  if (null != this.taskType) {
    output.writeFieldBegin('taskType', Thrift.Type.I32, 2)
    output.writeI32(this.taskType)
    output.writeFieldEnd()
  }
  if (null != this.taskAttributes) {
    output.writeFieldBegin('taskAttributes', Thrift.Type.MAP, 3)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.taskAttributes))
      {
        for(var kiter59 in this.taskAttributes)        {
          if (this.taskAttributes.hasOwnProperty(kiter59))
          {
            var viter60 = this.taskAttributes[kiter59]
            output.writeString(kiter59)
            output.writeString(viter60)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.taskCounters) {
    output.writeFieldBegin('taskCounters', Thrift.Type.MAP, 4)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.taskCounters))
      {
        for(var kiter61 in this.taskCounters)        {
          if (this.taskCounters.hasOwnProperty(kiter61))
          {
            var viter62 = this.taskCounters[kiter61]
            output.writeString(kiter61)
            output.writeI64(viter62)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.operatorGraph) {
    output.writeFieldBegin('operatorGraph', Thrift.Type.STRUCT, 5)
    this.operatorGraph.write(output)
    output.writeFieldEnd()
  }
  if (null != this.operatorList) {
    output.writeFieldBegin('operatorList', Thrift.Type.LIST, 6)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.operatorList.length)
      {
        for(var iter63 in this.operatorList)
        {
          if (this.operatorList.hasOwnProperty(iter63))
          {
            iter63=this.operatorList[iter63]
            iter63.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.done) {
    output.writeFieldBegin('done', Thrift.Type.BOOL, 7)
    output.writeBool(this.done)
    output.writeFieldEnd()
  }
  if (null != this.started) {
    output.writeFieldBegin('started', Thrift.Type.BOOL, 8)
    output.writeBool(this.started)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Stage = module.exports.Stage = function(args){
  this.stageId = null
  this.stageType = null
  this.stageAttributes = null
  this.stageCounters = null
  this.taskList = null
  this.done = null
  this.started = null
if( args != null ){  if (null != args.stageId)
  this.stageId = args.stageId
  if (null != args.stageType)
  this.stageType = args.stageType
  if (null != args.stageAttributes)
  this.stageAttributes = args.stageAttributes
  if (null != args.stageCounters)
  this.stageCounters = args.stageCounters
  if (null != args.taskList)
  this.taskList = args.taskList
  if (null != args.done)
  this.done = args.done
  if (null != args.started)
  this.started = args.started
}}
Stage.prototype = {}
Stage.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.stageId = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I32) {
        this.stageType = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.MAP) {
        {
          var _size64 = 0
          var rtmp3
          this.stageAttributes = {}
          var _ktype65 = 0
          var _vtype66 = 0
          rtmp3 = input.readMapBegin()
          _ktype65= rtmp3.ktype
          _vtype66= rtmp3.vtype
          _size64= rtmp3.size
          for (var _i68 = 0; _i68 < _size64; ++_i68)
          {
            key69 = null
            val70 = null
            key69 = input.readString()
            val70 = input.readString()
            this.stageAttributes[key69] = val70
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.MAP) {
        {
          var _size71 = 0
          var rtmp3
          this.stageCounters = {}
          var _ktype72 = 0
          var _vtype73 = 0
          rtmp3 = input.readMapBegin()
          _ktype72= rtmp3.ktype
          _vtype73= rtmp3.vtype
          _size71= rtmp3.size
          for (var _i75 = 0; _i75 < _size71; ++_i75)
          {
            key76 = null
            val77 = null
            key76 = input.readString()
            val77 = input.readI64()
            this.stageCounters[key76] = val77
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.LIST) {
        {
          var _size78 = 0
          var rtmp3
          this.taskList = []
          var _etype81 = 0
          rtmp3 = input.readListBegin()
          _etype81 = rtmp3.etype
          _size78 = rtmp3.size
          for (var _i82 = 0; _i82 < _size78; ++_i82)
          {
            var elem83 = null
            elem83 = new ttypes.Task()
            elem83.read(input)
            this.taskList.push(elem83)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.BOOL) {
        this.done = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 7:      if (ftype == Thrift.Type.BOOL) {
        this.started = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Stage.prototype.write = function(output){ 
  output.writeStructBegin('Stage')
  if (null != this.stageId) {
    output.writeFieldBegin('stageId', Thrift.Type.STRING, 1)
    output.writeString(this.stageId)
    output.writeFieldEnd()
  }
  if (null != this.stageType) {
    output.writeFieldBegin('stageType', Thrift.Type.I32, 2)
    output.writeI32(this.stageType)
    output.writeFieldEnd()
  }
  if (null != this.stageAttributes) {
    output.writeFieldBegin('stageAttributes', Thrift.Type.MAP, 3)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.stageAttributes))
      {
        for(var kiter84 in this.stageAttributes)        {
          if (this.stageAttributes.hasOwnProperty(kiter84))
          {
            var viter85 = this.stageAttributes[kiter84]
            output.writeString(kiter84)
            output.writeString(viter85)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.stageCounters) {
    output.writeFieldBegin('stageCounters', Thrift.Type.MAP, 4)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.stageCounters))
      {
        for(var kiter86 in this.stageCounters)        {
          if (this.stageCounters.hasOwnProperty(kiter86))
          {
            var viter87 = this.stageCounters[kiter86]
            output.writeString(kiter86)
            output.writeI64(viter87)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.taskList) {
    output.writeFieldBegin('taskList', Thrift.Type.LIST, 5)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.taskList.length)
      {
        for(var iter88 in this.taskList)
        {
          if (this.taskList.hasOwnProperty(iter88))
          {
            iter88=this.taskList[iter88]
            iter88.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.done) {
    output.writeFieldBegin('done', Thrift.Type.BOOL, 6)
    output.writeBool(this.done)
    output.writeFieldEnd()
  }
  if (null != this.started) {
    output.writeFieldBegin('started', Thrift.Type.BOOL, 7)
    output.writeBool(this.started)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Query = module.exports.Query = function(args){
  this.queryId = null
  this.queryType = null
  this.queryAttributes = null
  this.queryCounters = null
  this.stageGraph = null
  this.stageList = null
  this.done = null
  this.started = null
if( args != null ){  if (null != args.queryId)
  this.queryId = args.queryId
  if (null != args.queryType)
  this.queryType = args.queryType
  if (null != args.queryAttributes)
  this.queryAttributes = args.queryAttributes
  if (null != args.queryCounters)
  this.queryCounters = args.queryCounters
  if (null != args.stageGraph)
  this.stageGraph = args.stageGraph
  if (null != args.stageList)
  this.stageList = args.stageList
  if (null != args.done)
  this.done = args.done
  if (null != args.started)
  this.started = args.started
}}
Query.prototype = {}
Query.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.queryId = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.queryType = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.MAP) {
        {
          var _size89 = 0
          var rtmp3
          this.queryAttributes = {}
          var _ktype90 = 0
          var _vtype91 = 0
          rtmp3 = input.readMapBegin()
          _ktype90= rtmp3.ktype
          _vtype91= rtmp3.vtype
          _size89= rtmp3.size
          for (var _i93 = 0; _i93 < _size89; ++_i93)
          {
            key94 = null
            val95 = null
            key94 = input.readString()
            val95 = input.readString()
            this.queryAttributes[key94] = val95
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.MAP) {
        {
          var _size96 = 0
          var rtmp3
          this.queryCounters = {}
          var _ktype97 = 0
          var _vtype98 = 0
          rtmp3 = input.readMapBegin()
          _ktype97= rtmp3.ktype
          _vtype98= rtmp3.vtype
          _size96= rtmp3.size
          for (var _i100 = 0; _i100 < _size96; ++_i100)
          {
            key101 = null
            val102 = null
            key101 = input.readString()
            val102 = input.readI64()
            this.queryCounters[key101] = val102
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.STRUCT) {
        this.stageGraph = new ttypes.Graph()
        this.stageGraph.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.LIST) {
        {
          var _size103 = 0
          var rtmp3
          this.stageList = []
          var _etype106 = 0
          rtmp3 = input.readListBegin()
          _etype106 = rtmp3.etype
          _size103 = rtmp3.size
          for (var _i107 = 0; _i107 < _size103; ++_i107)
          {
            var elem108 = null
            elem108 = new ttypes.Stage()
            elem108.read(input)
            this.stageList.push(elem108)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 7:      if (ftype == Thrift.Type.BOOL) {
        this.done = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 8:      if (ftype == Thrift.Type.BOOL) {
        this.started = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Query.prototype.write = function(output){ 
  output.writeStructBegin('Query')
  if (null != this.queryId) {
    output.writeFieldBegin('queryId', Thrift.Type.STRING, 1)
    output.writeString(this.queryId)
    output.writeFieldEnd()
  }
  if (null != this.queryType) {
    output.writeFieldBegin('queryType', Thrift.Type.STRING, 2)
    output.writeString(this.queryType)
    output.writeFieldEnd()
  }
  if (null != this.queryAttributes) {
    output.writeFieldBegin('queryAttributes', Thrift.Type.MAP, 3)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.queryAttributes))
      {
        for(var kiter109 in this.queryAttributes)        {
          if (this.queryAttributes.hasOwnProperty(kiter109))
          {
            var viter110 = this.queryAttributes[kiter109]
            output.writeString(kiter109)
            output.writeString(viter110)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.queryCounters) {
    output.writeFieldBegin('queryCounters', Thrift.Type.MAP, 4)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.queryCounters))
      {
        for(var kiter111 in this.queryCounters)        {
          if (this.queryCounters.hasOwnProperty(kiter111))
          {
            var viter112 = this.queryCounters[kiter111]
            output.writeString(kiter111)
            output.writeI64(viter112)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.stageGraph) {
    output.writeFieldBegin('stageGraph', Thrift.Type.STRUCT, 5)
    this.stageGraph.write(output)
    output.writeFieldEnd()
  }
  if (null != this.stageList) {
    output.writeFieldBegin('stageList', Thrift.Type.LIST, 6)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.stageList.length)
      {
        for(var iter113 in this.stageList)
        {
          if (this.stageList.hasOwnProperty(iter113))
          {
            iter113=this.stageList[iter113]
            iter113.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.done) {
    output.writeFieldBegin('done', Thrift.Type.BOOL, 7)
    output.writeBool(this.done)
    output.writeFieldEnd()
  }
  if (null != this.started) {
    output.writeFieldBegin('started', Thrift.Type.BOOL, 8)
    output.writeBool(this.started)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var QueryPlan = module.exports.QueryPlan = function(args){
  this.queries = null
  this.done = null
  this.started = null
if( args != null ){  if (null != args.queries)
  this.queries = args.queries
  if (null != args.done)
  this.done = args.done
  if (null != args.started)
  this.started = args.started
}}
QueryPlan.prototype = {}
QueryPlan.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.LIST) {
        {
          var _size114 = 0
          var rtmp3
          this.queries = []
          var _etype117 = 0
          rtmp3 = input.readListBegin()
          _etype117 = rtmp3.etype
          _size114 = rtmp3.size
          for (var _i118 = 0; _i118 < _size114; ++_i118)
          {
            var elem119 = null
            elem119 = new ttypes.Query()
            elem119.read(input)
            this.queries.push(elem119)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.BOOL) {
        this.done = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.BOOL) {
        this.started = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

QueryPlan.prototype.write = function(output){ 
  output.writeStructBegin('QueryPlan')
  if (null != this.queries) {
    output.writeFieldBegin('queries', Thrift.Type.LIST, 1)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.queries.length)
      {
        for(var iter120 in this.queries)
        {
          if (this.queries.hasOwnProperty(iter120))
          {
            iter120=this.queries[iter120]
            iter120.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.done) {
    output.writeFieldBegin('done', Thrift.Type.BOOL, 2)
    output.writeBool(this.done)
    output.writeFieldEnd()
  }
  if (null != this.started) {
    output.writeFieldBegin('started', Thrift.Type.BOOL, 3)
    output.writeBool(this.started)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

