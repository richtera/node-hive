//
// Autogenerated by Thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('../thrift').Thrift;
var ttypes = module.exports = {};
ttypes.JobTrackerState = { 
'INITIALIZING' : 1
,'RUNNING' : 2
}
var HiveClusterStatus = module.exports.HiveClusterStatus = function(args){
  this.taskTrackers = null
  this.mapTasks = null
  this.reduceTasks = null
  this.maxMapTasks = null
  this.maxReduceTasks = null
  this.state = null
if( args != null ){  if (null != args.taskTrackers)
  this.taskTrackers = args.taskTrackers
  if (null != args.mapTasks)
  this.mapTasks = args.mapTasks
  if (null != args.reduceTasks)
  this.reduceTasks = args.reduceTasks
  if (null != args.maxMapTasks)
  this.maxMapTasks = args.maxMapTasks
  if (null != args.maxReduceTasks)
  this.maxReduceTasks = args.maxReduceTasks
  if (null != args.state)
  this.state = args.state
}}
HiveClusterStatus.prototype = {}
HiveClusterStatus.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I32) {
        this.taskTrackers = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I32) {
        this.mapTasks = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I32) {
        this.reduceTasks = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I32) {
        this.maxMapTasks = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.I32) {
        this.maxReduceTasks = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

HiveClusterStatus.prototype.write = function(output){ 
  output.writeStructBegin('HiveClusterStatus')
  if (null != this.taskTrackers) {
    output.writeFieldBegin('taskTrackers', Thrift.Type.I32, 1)
    output.writeI32(this.taskTrackers)
    output.writeFieldEnd()
  }
  if (null != this.mapTasks) {
    output.writeFieldBegin('mapTasks', Thrift.Type.I32, 2)
    output.writeI32(this.mapTasks)
    output.writeFieldEnd()
  }
  if (null != this.reduceTasks) {
    output.writeFieldBegin('reduceTasks', Thrift.Type.I32, 3)
    output.writeI32(this.reduceTasks)
    output.writeFieldEnd()
  }
  if (null != this.maxMapTasks) {
    output.writeFieldBegin('maxMapTasks', Thrift.Type.I32, 4)
    output.writeI32(this.maxMapTasks)
    output.writeFieldEnd()
  }
  if (null != this.maxReduceTasks) {
    output.writeFieldBegin('maxReduceTasks', Thrift.Type.I32, 5)
    output.writeI32(this.maxReduceTasks)
    output.writeFieldEnd()
  }
  if (null != this.state) {
    output.writeFieldBegin('state', Thrift.Type.I32, 6)
    output.writeI32(this.state)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var HiveServerException = module.exports.HiveServerException = function(args){
  Thrift.TException.call(this, "HiveServerException")
  this.name = "HiveServerException"
  this.message = null
  this.errorCode = null
  this.SQLState = null
if( args != null ){  if (null != args.message)
  this.message = args.message
  if (null != args.errorCode)
  this.errorCode = args.errorCode
  if (null != args.SQLState)
  this.SQLState = args.SQLState
}}
Thrift.inherits(HiveServerException, Thrift.TException)
HiveServerException.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.SQLState = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

HiveServerException.prototype.write = function(output){ 
  output.writeStructBegin('HiveServerException')
  if (null != this.message) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1)
    output.writeString(this.message)
    output.writeFieldEnd()
  }
  if (null != this.errorCode) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 2)
    output.writeI32(this.errorCode)
    output.writeFieldEnd()
  }
  if (null != this.SQLState) {
    output.writeFieldBegin('SQLState', Thrift.Type.STRING, 3)
    output.writeString(this.SQLState)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

